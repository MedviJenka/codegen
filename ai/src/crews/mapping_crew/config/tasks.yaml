function_task:
  agent: function_agent
  description: >
    Identify the most relevant function from the provided function list based on the user query: "{query}".
    the query is a test plan, search for relevant functions in the provided text
    Extract all necessary function arguments dynamically based on text.
    Return the function name along with the extracted arguments.

    ### **Key Requirements:**
      - **Function Matching:** Select only from the available functions.
      - **Argument Extraction:** Dynamically determine all required arguments based on the query context.
      - **Strict Syntax Compliance:** Do NOT generate new function logic.
      - **Maintain Correct Data Types:** Ensure argument types align with the provided JSON schema.

  expected_output: >
    Return the function name and arguments in a valid syntax.

    **Format:**  
      valid python function call

    **Example Response:**
      ```python
      function_name(arg1: type1, arg2: type2)
      ```


import_module_task:
  agent: code_agent
  description: >
    Identify and import the required Python modules dynamically based on the function selected in {query}.
    Ensure that all necessary dependencies are correctly imported.
    Handle cases where a module might need aliasing for cleaner usage.

    ### **Key Requirements:**
      - **Module Matching:** Identify the correct modules required for executing the function.
      - **Avoid Redundant Imports:** Do not import built-in Python modules if they are not needed.
      - **Alias Modules If Necessary:** Use standard aliasing (e.g., `import numpy as np` if applicable).
      - **Format Code Correctly:** Ensure imports are in Pythonic format and PEP8 compliant.

  expected_output: >
    Return the required module imports in valid Python syntax based on query.

    **Format:**
      - **Single Import:**
        ```python
        import module_name
        ```

      - **Aliased Import:**
        ```python
        import module_name as alias
        ```

      - **Specific Function Import:**
        ```python
        from module_name import function_name
        ```

    **Example Response:**
      ```python
      import os
      import json
      from datetime import datetime
      ```

pybrenv_task:
    agent: code_agent
    description: >
        Identify the Python environment required to execute the function selected in {query}.
        Determine the Python version and any additional dependencies needed to run the function successfully.

        ### ** CODE TEMPLATE **

          import pytest
          import coreinfra.core.environment.environment_variables as env
          from selenium.common import TimeoutException
          from qasharedinfra.devices.audc.smarttap.smarttap import SmartTap
          from qasharedinfra.infra.ipp.services.selenium_services.mappedselenium import MappedSelenium
          from qasharedinfra.infra.smarttap.selenium.utils.bini_utils import IRBiniUtils
          from selenium.webdriver.support.ui import WebDriverWait
          from selenium.webdriver.support import expected_conditions as EC
          from qasharedinfra.infra.smarttap.selenium.utils.interactions_page_utils import InteractionsPageFunctionalUtils
          from testing.smarttap.interactions_page.core.sample_image_enums import NotesSamples


          HEADLESS = False
          st: SmartTap = env.devices['Device_1']
          log = env.logger


          @pytest.fixture(scope='module', autouse=True)
          def init_globals() -> None:

            bini = IRBiniUtils()
            st.logger_.info('\n******** Module (Script) Setup ********')
            st.test_prerequisites(selenium=True, headless=HEADLESS)
            st.ui.utils.st_selenium_go_to_screen_in_current_window(st.selenium, st.st_screens.interactions)

            yield bini

            st.logger.info('******** Module (Script) TearDown ********')
            st.selenium.finalize()


          @pytest.fixture(scope='function', autouse=True)
          def setup_and_teardown() -> None:
            st.logger_.info('******** Test Setup ********')
            yield
            st.logger_.info('******** Test TearDown ********')


          @pytest.fixture
          def driver() -> MappedSelenium:
            return st.selenium


          @pytest.fixture
          def ir_utils() -> InteractionsPageFunctionalUtils:
            return st.ui.interactions


          class TestNotesFunctionalityAndDisplay:

            def test_security_script_injection(self, driver, ir_utils) -> None:

                """validate injecting javascript script output is text and not actual function"""
                script = '<script>alert(0);</script>'
                ir_utils.create_note(driver=driver, text=script)
                try:
                    WebDriverWait(driver.webdriver, 3).until(EC.alert_is_present())
                except TimeoutException:
                    pass

    expected_output: >
      ```python
      <CODE>
      ```
